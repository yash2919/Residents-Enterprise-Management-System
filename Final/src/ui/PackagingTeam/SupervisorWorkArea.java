/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.PackagingTeam;

import business.Business;
import business.Enterprise.PackagingTeamEnterprise;
import business.Organisation.Organisation;
import business.UserAccount.UserAccount;
import business.UserAccount.UserAccountDirectory;
import business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author uttkarsh
 */
public class SupervisorWorkArea extends javax.swing.JPanel {

    /**
     * Creates new form PackagingTeamWorkAreaJPanel
     */
    private JPanel workArea;
    private PackagingTeamEnterprise ent;
    private Business business;
    private UserAccount userAccount;
    public SupervisorWorkArea(JPanel userProcessContainer, UserAccount account, PackagingTeamEnterprise ent, Business business) {
        initComponents();
        
        this.workArea = userProcessContainer; 
    this.ent = ent;
    this.business = business;
    this.userAccount = account;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        assigndel = new javax.swing.JButton();
        checkstatus = new javax.swing.JButton();
        Addpackage = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        AssignDelivery = new javax.swing.JTable();
        deliveryguy = new javax.swing.JTextField();

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Packaging Team Supervisor Portal");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        assigndel.setText("Assign a Delivery");
        assigndel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assigndelActionPerformed(evt);
            }
        });

        checkstatus.setText("Check Delivery Status");

        Addpackage.setText("Add package to Deliver");
        Addpackage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddpackageActionPerformed(evt);
            }
        });

        AssignDelivery.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Package", "Delivery to Unit No.", "Resident Name", "Status", "DeliveryGuy"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(AssignDelivery);
        if (AssignDelivery.getColumnModel().getColumnCount() > 0) {
            AssignDelivery.getColumnModel().getColumn(0).setResizable(false);
            AssignDelivery.getColumnModel().getColumn(1).setResizable(false);
            AssignDelivery.getColumnModel().getColumn(2).setResizable(false);
            AssignDelivery.getColumnModel().getColumn(3).setResizable(false);
            AssignDelivery.getColumnModel().getColumn(4).setResizable(false);
        }

        deliveryguy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deliveryguyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(45, 45, 45))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(checkstatus, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Addpackage, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(174, 174, 174)
                                .addComponent(assigndel, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51)
                                .addComponent(deliveryguy, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 776, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Addpackage, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(assigndel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deliveryguy, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(checkstatus, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void AddpackageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddpackageActionPerformed
        // TODO add your handling code here:
        
        // Prompt the user for package details using JOptionPane
    String residentName = JOptionPane.showInputDialog(this, "Enter Resident Name:");
    String residentIdString = JOptionPane.showInputDialog(this, "Enter Unit No.:");
    String packageDetails = JOptionPane.showInputDialog(this, "Enter Package Details:");

    // Validate and convert Resident ID to integer
    int residentId;
    try {
        residentId = Integer.parseInt(residentIdString);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid Resident ID. Please enter a valid number.");
        return; // Exit the method if the ID is invalid
    }

    // Add a new row to the table with the entered details
      DefaultTableModel model = (DefaultTableModel) AssignDelivery.getModel();
    model.setRowCount(0);
    
    Object[] rowData = {
        packageDetails,
        residentId,
        residentName,
        "Not Delivered",
        "Not Assigned",
    };
    model.addRow(rowData);

    // Notify user about the successful addition
    JOptionPane.showMessageDialog(this, "Package added successfully!");

    }//GEN-LAST:event_AddpackageActionPerformed

    private void deliveryguyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deliveryguyActionPerformed
       
    }//GEN-LAST:event_deliveryguyActionPerformed

    private void assigndelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assigndelActionPerformed
           // Get the selected row index
    int selectedRowIndex = AssignDelivery.getSelectedRow();

    // Check if a row is selected
    if (selectedRowIndex == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to assign the delivery.");
        return;
    }

    // Get the values from the selected row
    String residentName = (String) AssignDelivery.getValueAt(selectedRowIndex, 2); // Assuming "Resident Name" is at column index 2
    String deliveryGuy = deliveryguy.getText();

    // Check if the logged-in user is the same as the entered delivery guy
    if (deliveryGuy.equals(userAccount.getUsername())) {
        // Create a WorkRequest
        WorkRequest workRequest = new WorkRequest() {};
        workRequest.setMessage("Delivery assignment for resident: " + residentName);
        workRequest.setSender(userAccount);

        // Set the receiver based on the entered delivery guy
        UserAccount deliveryGuyAccount = null;
        for (Organisation org : ent.getOrganisationDirectory().getOrganisationList()) {
            for (UserAccount userAccount : org.getUserAccountDirectory().getUserAccountList()) {
                if (userAccount.getUsername().equals(deliveryGuy)) {
                    deliveryGuyAccount = userAccount;
                    break; // Exit the loop once a match is found
                }
            }
            if (deliveryGuyAccount != null) {
                break; // Exit the outer loop once a match is found
            }
        }

        if (deliveryGuyAccount != null) {
            workRequest.setReceiver(deliveryGuyAccount);
        } else {
            JOptionPane.showMessageDialog(this, "Delivery guy not found.");
            return;
        }

        workRequest.setStatus("Pending");
        workRequest.setType("Delivery Assignment");

        // Add the WorkRequest to your business or the appropriate data structure
        // business.addWorkRequest(workRequest);

        // Update the "DeliveryGuy" column in the selected row
        AssignDelivery.getModel().setValueAt(deliveryGuy, selectedRowIndex, 4); // Assuming "DeliveryGuy" is at column index 4

        // Notify the user about the successful assignment
        JOptionPane.showMessageDialog(this, "Delivery assigned successfully!");
    } else {
        JOptionPane.showMessageDialog(this, "You can only assign a delivery to yourself as the delivery guy.");
    }
    }//GEN-LAST:event_assigndelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Addpackage;
    private javax.swing.JTable AssignDelivery;
    private javax.swing.JButton assigndel;
    private javax.swing.JButton checkstatus;
    private javax.swing.JTextField deliveryguy;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

 


}
