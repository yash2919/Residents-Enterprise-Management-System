/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.AdministrativeRole;

import java.awt.Color;
import java.awt.Graphics;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JPanel;

/**
 *
 * @author luvkhubani
 */
public class AnalyticsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AnalyticsJPanell
     */
    
    private BarGraphPanel barGraphPanel;

    public AnalyticsJPanel() {
        initComponents();
        showBarGraph();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void showBarGraph() {
        Map<String, Integer> data = new HashMap<>();
        data.put("CategoryA", 30);
        data.put("CategoryB", 50);
        data.put("CategoryC", 20);
        data.put("CategoryD", 80);

        barGraphPanel = new BarGraphPanel(data);
    }

    // Inner class for BarGraphPanel
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        if (barGraphPanel != null) {
            // Position and size for the BarGraphPanel
            int x = 50;
            int y = 50;
            int width = 400; // Adjust as needed
            int height = 300; // Adjust as needed

            barGraphPanel.setBounds(x, y, width, height);
            barGraphPanel.paintComponent(g);
        }
    }
    
    private class BarGraphPanel extends JPanel {
        private Map<String, Integer> data;

        public BarGraphPanel(Map<String, Integer> data) {
            this.data = data;
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);

            int barWidth = 50;
            int spaceBetweenBars = 20;
            int x = 0;
            int maxHeight = getHeight() - 50;

            for (Map.Entry<String, Integer> entry : data.entrySet()) {
                String label = entry.getKey();
                int value = entry.getValue();
                int barHeight = (int) ((double) value / getMaxValue(data) * maxHeight);

                g.setColor(Color.BLUE);
                g.fillRect(x, getHeight() - barHeight, barWidth, barHeight);

                g.setColor(Color.BLACK);
                g.drawString(label, x + barWidth / 2 - g.getFontMetrics().stringWidth(label) / 2, getHeight() - 5);

                x += barWidth + spaceBetweenBars;
            }
        }

        private int getMaxValue(Map<String, Integer> data) {
            return data.values().stream().max(Integer::compare).orElse(0);
        }
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 956, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 476, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}